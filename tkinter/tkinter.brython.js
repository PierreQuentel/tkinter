__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1640895981726, "tkinter.font": [".py", "class Constant:\n\n def __init__(self,value):\n  self.value=value\n  \n def __repr__(self):\n  return self.value\n  \nNORMAL=Constant('NORMAL')\nBOLD=Constant('BOLD')\nITALIC=Constant('ITALIC')\n\nclass Font:\n\n def __init__(self,*,font=None ,family=None ,size=None ,weight=NORMAL,\n slant=NORMAL,underline=0,overstrike=0):\n  if isinstance(font,tuple):\n   family,size,slant=font\n  else :\n   family=font\n  css={}\n  if family is not None :\n   css['font-family']=f'{family}'\n  if size is not None :\n   css['font-size']=f'{size}px'\n  css['font-weight']=f'{weight}'\n  css['font-style']=f'{slant}'\n  self.css=css\n", []], "tkinter": [".py", "import re\n\nimport javascript\nfrom browser import console,document,html,window\n\n_loops=[]\n_selected=[]\n\n\nfontFamily='Arial'\ncolor='#000'\nbackgroundColor='#f0f0f0'\nborderColor='#008'\ntitle_bgColor='#fff'\ntitle_color='#000'\n\n\nanchors=\"n ne e se s sw w nw center\"\nconstants=anchors+\"\"\"\nnormal active disabled end single browse multiple extended\nleft right top bottom\nnone both x y\ninsert current\nflat sunken raised groove ridge\"\"\"\nfor name in constants.split():\n globals()[name.upper()]=name\n \n \nborder_styles={\n'flat':{\n'borderWidth':0\n},\n'raised':{\n'outer':'#fff #777 #777 #fff',\n'inner':'#e3e3e3 #aaa #aaa #e3e3e3'\n},\n'sunken':{\n'outer':'#aaa #fff #fff #aaa',\n'inner':'#777 #e3e3e3 #e3e3e3 #777'\n},\n'ridge':{\n'outer':'#fff #b8b8b8 #b8b8b8 #fff',\n'inner':'#a8a8a8 #fff #fff #a8a8a8'\n},\n'groove':{\n'outer':'#aaa #fff #fff #aaa',\n'inner':'#fff #aaa #aaa #fff'\n}\n}\n\nclass _Packed:\n\n def __init__(self,widget,side,fill,expand,anchor,\n padx,pady,ipadx,ipady):\n  self.widget=widget\n  self.side=side\n  self.fill=fill\n  self.expand=expand\n  if anchor not in anchors:\n   raise ValueError(f'bad anchor \"{anchor}\": '+\n   'must be n, ne, e, se, s, sw, w, nw, or center')\n  self.anchor=anchor\n  self.padx=padx\n  self.pady=pady\n  self.ipadx=ipadx\n  self.ipady=ipady\n  \nclass Cavity:\n\n def __init__(self,left,top,width,height):\n  self.left=left\n  self.top=top\n  self.width=width\n  self.height=height\n  \nclass _Packer:\n\n def __init__(self,widget):\n  self.widget=widget\n  \n def process(self):\n  self.compute_container_dimensions()\n  \n  for elt in self.widget._packed:\n   self.compute_parcel_dimensions(elt)\n   self.compute_content_dimensions(elt)\n   self.position_content_in_parcel(elt)\n   \n def compute_content_dimensions(self,elt):\n  ''\n\n\n\n\n\n\n\n\n\n\n  \n  parcel=elt.parcel\n  if elt.fill in [X,BOTH]:\n   elt.content_width=parcel.offsetWidth -2 *elt.padx\n  else :\n   elt.content_width=elt.content_req_width\n   \n  if elt.fill in [Y,BOTH]:\n   elt.content_height=parcel.offsetHeight -2 *elt.pady\n  else :\n   elt.content_height=elt.content_req_height\n   \n def compute_parcel_dimensions(self,elt):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n  \n  if elt.side in [TOP,BOTTOM]:\n   parcel_width=self.cavity.width\n   parcel_height=elt.content_req_height\n   if elt.expand:\n    parcel_height +=self.expand_height\n  else :\n   parcel_height=self.cavity.height\n   parcel_width=elt.content_req_width\n   if elt.expand:\n    parcel_width +=self.expand_width\n    \n  if elt.side ==LEFT:\n   parcel_left=self.cavity.left\n   parcel_top=self.cavity.top\n   self.cavity.left +=parcel_width\n   self.cavity.width -=parcel_width\n  elif elt.side ==RIGHT:\n   parcel_left=self.cavity.left+self.cavity.width -self.content_req_width\n   self.cavity.width -=parcel_width\n  elif elt.side ==TOP:\n   parcel_left=self.cavity.left\n   parcel_top=self.cavity.top\n   elt.left=0\n   self.cavity.top +=parcel_height\n   self.cavity.height -=parcel_height\n  elif elt.side ==BOTTOM:\n   parcel_top=self.cavity.top+self.cavity.height -elt.content_req_height\n   parcel_left=self.cavity.left\n   self.cavity.height -=parcel_height\n   \n  parcel=elt.parcel=html.SPAN(style=\"position:absolute;\")\n  parcel.style.left=f'{parcel_left}px'\n  parcel.style.top=f'{parcel_top}px'\n  parcel.style.width=f'{parcel_width}px'\n  parcel.style.height=f'{parcel_height}px'\n  parcel.style.display='flex'\n  \n  \n  \n  self.container <=parcel\n  \n def position_content_in_parcel(self,elt):\n  ''\n\n\n\n  \n  parcel=elt.parcel\n  content=elt.widget.element\n  content.style.boxSizing='border-box'\n  content.style.width=f'{elt.content_width}px'\n  content.style.height=f'{elt.content_height}px'\n  content.style.display='flex'\n  \n  anchor=elt.anchor\n  \n  if 'W'in anchor:\n   parcel.style.justifyContent='start'\n   content.style.justifyContent='start'\n  elif 'E'in anchor:\n   content.style.justifyContent='end'\n   parcel.style.justifyContent='end'\n  if 'N'in anchor:\n   content.style.alignItems='start'\n   parcel.style.alignItems='start'\n  elif 'S'in anchor:\n   content.style.alignItems='end'\n   parcel.style.alignItems='end'\n  if anchor =='center':\n   content.style.alignItems='center'\n   content.style.justifyContent='center'\n   parcel.style.alignItems='center'\n   parcel.style.justifyContent='center'\n   \n  parcel <=content\n  \n def compute_container_dimensions(self):\n  container=self.widget.element\n  left=0\n  width=container.offsetWidth\n  top=0\n  height=container.offsetHeight\n  toplevel=isinstance(self.widget,Tk)\\\n  and self.widget.title_bar.style.display !='none'\n  if toplevel:\n   top +=self.widget.title_bar.offsetHeight\n   height -=self.widget.title_bar.offsetHeight\n   container=self.widget.panel\n   \n  self.container=container\n  \n  container.clear()\n  container.style.visibility='hidden'\n  \n  nb_expand_x=0\n  nb_expand_y=0\n  width_required_by_left_right=0\n  height_required_by_top_bottom=0\n  container_req_width=0\n  container_req_height=0\n  for packed in self.widget._packed:\n   content=packed.widget.element\n   container <=content\n   \n   content_req_width=(content.offsetWidth+\n   2 *(packed.ipadx+packed.padx))\n   content_req_height=(content.offsetHeight+\n   2 *(packed.ipady+packed.pady))\n   packed.content_req_height=content_req_height\n   packed.content_req_width=content_req_width\n   if packed.expand:\n    if packed.side in [TOP,BOTTOM]:\n     nb_expand_y +=1\n    else :\n     nb_expand_x +=1\n   if packed.side in [TOP,BOTTOM]:\n    dh=0\n    container_req_height +=content_req_height\n    height_required_by_top_bottom +=content_req_height\n    \n    dw=(width_required_by_left_right+content_req_width -\n    container_req_width)\n   else :\n    dw=0\n    container_req_width +=content_req_width\n    width_required_by_left_right +=content_req_width\n    \n    dh=(height_required_by_top_bottom+content_req_height -\n    container_req_height)\n    \n  if dw >0:\n   container_req_width +=dw\n   \n  if container_req_width >width:\n   width=container_req_width\n   container.style.width=f'{width}px'\n   if toplevel:\n    self.widget.element.style.width=f'{width}px'\n    \n  if dh >0:\n   container_req_height +=dh\n  if container_req_height >height:\n   height=container_req_height\n   container.style.height=f'{height}px'\n   if toplevel:\n    h=height+self.widget.title_bar.offsetHeight\n    self.widget.element.style.height=f'{h}px'\n    \n  if nb_expand_x:\n   self.expand_width=(width -container_req_width)/nb_expand_x\n  if nb_expand_y:\n   self.expand_height=(height -container_req_height)/nb_expand_y\n   \n   \n   \n   \n  self.cavity=Cavity(left,top,width,height)\n  \n  container.clear()\n  container.style.visibility='visible'\n  \ndef option_alias(name):\n if name =='bg':\n  return 'background'\n elif name =='fg':\n  return 'foreground'\n elif name =='bd':\n  return 'borderwidth'\n else :\n  return name\n  \n  \nclass Widget:\n\n def __getitem__(self,option):\n  value=self.cget(option)\n  if value is None :\n   raise KeyError(option)\n  return value\n  \n def cget(self,option):\n  option=option_alias(option)\n  if option not in self.keys():\n   raise ValueError(f\"unknown option '{key}\")\n  return self.kw.get(option)\n  \n def config(self,**kw):\n  toplevel=isinstance(self,Tk)\n  has_relief='relief'in self.keys()\n  if has_relief:\n   inner=self.payload\n  keys=self.keys()\n  for key,value in kw.items():\n   if key not in keys:\n    raise ValueError(f\"unknown option '{key}\")\n    \n  if (text :=kw.get('text'))is not None :\n   self.payload.text=text\n   \n   \n  if (width :=kw.get('width'))is not None :\n   if has_relief:\n    self.payload.style.width=f'{width}em'\n   else :\n    self.element.style.width=f'{width}em'\n    \n  if (height :=kw.get('height'))is not None :\n   if isinstance(self,Listbox):\n    self.payload.attrs['size']=height\n   elif has_relief:\n    self.payload.style.height=f'{height}em'\n   else :\n    self.element.style.height=f'{height}em'\n  if (padx :=kw.get('padx'))is not None :\n   elt=inner if has_relief else self.element\n   elt.style.paddingLeft=f'{padx}px'\n   elt.style.paddingRight=f'{padx}px'\n  if (pady :=kw.get('pady'))is not None :\n   elt=inner if has_relief else self.element\n   elt.style.paddingTop=f'{pady}px'\n   elt.style.paddingBottom=f'{pady}px'\n   \n   \n  if (bg :=kw.get('bg'))is not None\\\n  or (bg :=kw.get('background'))is not None :\n   if toplevel:\n    self.panel.style.backgroundColor=bg\n   else :\n    self.payload.style.backgroundColor=bg\n   self.kw['background']=bg\n  if (fg :=kw.get('fg'))is not None\\\n  or (fg :=kw.get('foreground'))is not None :\n   self.payload.style.color=fg\n   self.kw['foreground']=fg\n  if (bd :=kw.get('bd'))is not None\\\n  or (bd :=kw.get('borderwidth'))is not None :\n   if not has_relief:\n    self.element.style.borderWidth=f'{bd}px'\n    self.element.style.borderStyle='solid'\n   self.kw['borderwidth']=bd\n   \n   \n  if (relief :=kw.get('relief'))is not None :\n   if relief not in border_styles:\n    raise ValueError(f'invalid relief: {relief}')\n    \n   bd=kw.get('bd')or kw.get('borderwidth')\\\n   or self.kw['borderwidth']\n   outer_bd=bd //2\n   inner_bd=bd -outer_bd\n   border_style=border_styles[relief]\n   \n   self.outer=self.element.firstChild\n   self.outer.style.borderWidth=f'{outer_bd}px'\n   self.outer.style.borderStyle='solid'\n   self.outer.style.borderColor=border_style['outer']\n   \n   self.inner=self.outer.firstChild\n   self.inner.style.borderWidth=f'{inner_bd}px'\n   self.inner.style.borderStyle='solid'\n   self.inner.style.borderColor=border_style['inner']\n   \n   \n  if (font :=kw.get('font'))is not None :\n   for key,value in font.css.items():\n    setattr(self.payload.style,key,value)\n    \n    \n  if (cursor :=kw.get('cursor'))is not None :\n   self.element.style.cursor=cursor\n   \n  if (command :=kw.get('command'))is not None :\n   self.element.bind('click',lambda ev:command())\n   \n  if (state :=kw.get('state'))is not None :\n   if state is DISABLED:\n    self.payload.attrs['disabled']=True\n   elif state is NORMAL:\n    self.payload.attrs['disabled']=False\n    \n  if (menu :=kw.get('menu'))is not None :\n   if toplevel:\n    menu._build()\n    self.payload.insertBefore(menu.element,\n    self.title_bar.nextSibling)\n    self.menu=menu\n    \n  if selectmode :=kw.get('selectmode')is not None :\n   self.payload.attrs['multiple']=selectmode is MULTIPLE\n   \n  self.kw |=kw\n  \n configure=config\n \n def grid(self,**kwargs):\n  td=grid(self.master,**kwargs)\n  td <=self.element\n  \n def pack(self,side=TOP,fill=NONE,expand=0,anchor='center',in_=None ,\n ipadx=0,ipady=0,padx=0,pady=0):\n  master=self.master\n  packed=_Packed(self,side,fill,expand,anchor,\n  padx,pady,ipadx,ipady)\n  if not hasattr(master,\"_packed\"):\n   master._packed=[packed]\n  else :\n   master._packed.append(packed)\n   \n def _pack(self):\n  ''\n\n  \n  _Packer(self).process()\n  \n def _root(self):\n  master=self.master\n  while not isinstance(master,Tk):\n   master=master.master\n  return master\n  \nclass Tk(Widget):\n ''\n \n \n _main_style={\n 'position':'absolute',\n 'left':f'{int(0.1 * window.innerWidth)}px',\n 'top':f'{int(0.1 * window.innerHeight)}px',\n 'font-family':fontFamily,\n 'z-index':10,\n 'resize':'both',\n 'overflow':'hidden',\n 'visibility':'hidden',\n 'box-shadow':'3px 3px 5px #999999'\n }\n \n _title_style={\n 'background-color':title_bgColor,\n 'color':title_color,\n 'border-style':'solid',\n 'border-color':borderColor,\n 'border-width':'0px',\n 'padding':'0.4em',\n 'cursor':'default'\n }\n \n _close_button_style={\n 'float':'right',\n 'color':color,\n 'cursor':'default',\n 'padding':'0.1em'\n }\n \n _panel_style={\n 'background-color':backgroundColor\n }\n \n _default_config={\n 'bg':backgroundColor,\n 'bd':1\n }\n \n def __init__(self,**kw):\n  self.element=self.payload=html.DIV(style=self._main_style)\n  \n  self.title_text=html.SPAN()\n  self.title_text.html='&nbsp;'\n  self.title_bar=html.DIV('tk'+3 *chr(160)+self.title_text,\n  style=self._title_style)\n  self.element <=self.title_bar\n  self.close_button=html.SPAN(\"&times;\",\n  style=self._close_button_style)\n  self.title_bar <=self.close_button\n  self.close_button.bind(\"click\",self.close)\n  self.panel=html.DIV(style=self._panel_style)\n  self.element <=self.panel\n  \n  self.kw=self._default_config |kw\n  \n  document <=self.element\n  \n  self.title_bar.bind(\"mousedown\",self._grab_widget)\n  self.element.bind(\"leave\",self._mouseup)\n  \n  self._maxsize=(None ,None )\n  self.minsize(150,15)\n  self.resizable(1,1)\n  \n  self.menu=None\n  \n  self.config(**self.kw)\n  \n  _loops.append(self)\n  \n def aspect(self,*args):\n  raise NotImplementedError()\n  \n def close(self,*args):\n  self.element.remove()\n  \n def deiconify(self):\n  self.element.style.visibility=\"visible\"\n  self._state=\"normal\"\n  \n def geometry(self,coords=None ):\n  if coords is None :\n   return (f'{self.widget.width}x{self.widget.height}+'\n   f'{self.widget.abs_left}+{self.widget.abs_top}')\n  else :\n   values={}\n   whxy=coords.split('x')\n   if len(whxy)>2:\n    raise ValueError(f'bad geometry specifier \"{coords}\"')\n   try :\n    values['width']=int(whxy[0])\n   except :\n    raise ValueError(f'bad geometry specifier \"{coords}\"')\n   if len(whxy)>2:\n    raise ValueError(f'bad geometry specifier \"{coords}\"')\n   elif len(whxy)==2:\n    hxy=whxy[1].split('+')\n    if len(hxy)>3:\n     raise ValueError(f'bad geometry specifier \"{coords}\"')\n    for key,value in zip(['height','left','top'],hxy):\n     try :\n      values[key]=int(value)\n     except :\n      raise ValueError(f'bad geometry specifier \"{coords}\"')\n   for key,value in values.items():\n    setattr(self.element.style,key,f'{value}px')\n   panel_height=self.element.offsetHeight -self.title_bar.offsetHeight\n   self.panel.style.height=f'{panel_height}px'\n   self.panel.style.width=f'{self.element.offsetWidth}px'\n   \n def keys(self):\n  return ['bd','borderwidth','class','menu','relief','screen',\n  'use','background','bg','colormap','container','cursor',\n  'height','highlightbackground','highlightcolor',\n  'highlightthickness','padx','pady','takefocus','visual',\n  'width']\n  \n def iconify(self):\n  raise NotImplementedError()\n  \n def maxsize(self,width=None ,height=None ):\n  if width is None and height is None :\n   return self._maxsize\n  self._maxsize=(width,height)\n  if width is not None :\n   self.element.style.maxWidth=f'{width}px'\n  if height is not None :\n   self.element.style.maxHeight=f'{height}px'\n   \n def minsize(self,width=None ,height=None ):\n  if width is None and height is None :\n   return self._minsize\n  self._minsize=(width,height)\n  if width is not None :\n   self.element.style.minWidth=f'{width}px'\n  if height is not None :\n   self.element.style.minHeight=f'{height}px'\n   \n def resizable(self,width=None ,height=None ):\n  if width is None :\n   css=self.element.style.resize\n   match css:\n    case 'both':\n     return (1,1)\n    case 'horizontal':\n     return (1,0)\n    case 'vertical':\n     return (0,1)\n    case 'non':\n     return (1,0)\n  else :\n   if height is None :\n    raise ValueError('missing value for height')\n   height=self._resizable[1]if height is None else height\n   match(width,height):\n    case(0,0):\n     self.element.style.resize='none'\n    case(0,1):\n     self.element.style.resize='vertical'\n    case(1,0):\n     self.element.style.resize='horizontal'\n    case(1,1):\n     self.element.style.resize='both'\n     \n def mainloop(self):\n  if hasattr(self,'_packed'):\n   self._pack()\n  self.element.style.visibility=\"visible\"\n  \n def overrideredirect(self,flag=None ):\n  if flag is None :\n   return self._overrideredirect\n  self._overrideredirect=flag\n  if flag:\n   self.title_bar.style.display='none'\n  else :\n   self.title_bar.style.display='block'\n   \n def quit(self):\n  self.element.remove()\n  \n def state(self):\n  return self._state\n  \n def title(self,title=None ):\n  if title is None :\n   return self.title_text.text\n  self.title_text.text=title\n  \n def withdraw(self):\n  self.element.style.visibility='hidden'\n  self._state='withdrawn'\n  \n def _grab_widget(self,event):\n  self._remove_menus()\n  _selected=[self]\n  document.bind(\"mousemove\",self._move_widget)\n  document.bind(\"mouseup\",self._stop_moving_widget)\n  self.initial=[self.element.left -event.x,\n  self.element.top -event.y]\n  \n  event.preventDefault()\n  \n def _move_widget(self,event):\n \n  self.element.left=self.initial[0]+event.x\n  self.element.top=self.initial[1]+event.y\n  \n def _remove_menus(self):\n  if self.menu and self.menu.open_submenu:\n   self.menu.open_on_mouseenter=False\n   self.menu.open_submenu.element.remove()\n   \n def _stop_moving_widget(self,event):\n  document.unbind('mousemove')\n  document.unbind('mouseup')\n  \n def _mouseup(self,event):\n  document.unbind(\"mousemove\")\n  document.unbind(\"touchmove\")\n  \n  \ndef grid(master,column=0,columnspan=1,row=None ,rowspan=1,\nin_=None ,ipadx=None ,ipady=None ,\nsticky=''):\n if not hasattr(master,'table'):\n  master.table=html.TABLE(width='100%')\n  master.element <=master.table\n if not hasattr(master,'cells'):\n  master.cells=set()\n  \n  \n  \n  \n if row is None :\n \n  row=len(master.table.rows)\n  \n nb_rows=len(master.table.rows)\n for i in range(row -nb_rows+1):\n  master.table <=html.TR()\n  \n tr=master.table.rows[row]\n \n nb_cols=len(tr.cells)\n \n cols_from_span=[c for (r,c)in master.cells\n if r ==row and c <column]\n \n cols_to_add=nb_cols+len(cols_from_span)\n for i in range(column -cols_to_add+1):\n  tr <=html.TD()\n  \n td=tr.cells[column -len(cols_from_span)]\n \n \n for i in range(1,rowspan):\n  for j in range(columnspan):\n   master.cells.add((row+i,column+j))\n for i in range(rowspan):\n  for j in range(1,columnspan):\n   master.cells.add((row+i,column+j))\n   \n if columnspan >1:\n  td.attrs['colspan']=columnspan\n if rowspan >1:\n  td.attrs['rowspan']=rowspan\n  \n sticky=list(sticky)\n \n if 'w'in sticky:\n  td.style.textAlign='left'\n if 'e'in sticky:\n  td.style.textAlign='right'\n if 'n'in sticky:\n  td.style.verticalAlign='top'\n if 's'in sticky:\n  td.style.verticalAlign='bottom'\n return td\n \n \nclass IntVar:\n\n COUNTER=0\n \n def __init__(self):\n  self.name=f'IntVar{IntVar.COUNTER}'\n  IntVar.COUNTER +=1\n  \n def get(self):\n  return self.value\n  \n def set(self,value):\n  self.value=value\n  \nclass StringVar:\n\n COUNTER=0\n \n def __init__(self):\n  self.name=f'StringVar{StringVar.COUNTER}'\n  StringVar.COUNTER +=1\n  self.value=None\n  \n def __repr__(self):\n  return f'<StringVar {self.value}>'\n  \n def get(self):\n  return self.value\n  \n def set(self,value):\n  self.value=value\n  \nclass Button(Widget):\n\n _default_config={\n 'cursor':'default',\n 'borderwidth':2,\n 'relief':'raised',\n 'padx':2,\n 'pady':2\n }\n \n def __init__(self,master,text='',**kw):\n  self.master=master\n  self.kw=self._default_config |kw\n  self.payload=html.DIV(text)\n  self.element=html.SPAN(html.DIV(self.payload))\n  self.config(**self.kw)\n  \n def keys(self):\n  return ['activebackground','activeforeground','anchor',\n  'background','bd','bg','bitmap','borderwidth','command',\n  'compound','cursor','default','disabledforeground','fg',\n  'font','foreground','height','highlightbackground',\n  'highlightcolor','highlightthickness','image','justify',\n  'overrelief','padx','pady','relief','repeatdelay',\n  'repeatinterval','state','takefocus','text','textvariable',\n  'underline','width','wraplength']\n  \nclass Entry(Widget):\n\n def __init__(self,master,**kw):\n  self.master=master\n  self.kw=kw\n  self.payload=html.INPUT()\n  self.element=html.SPAN(html.DIV(html.DIV(self.payload)))\n  self.config(**kw)\n  \n def get(self):\n  return self.payload.value\n  \n def keys(self):\n  return ['background','bd','bg','borderwidth','cursor',\n  'disabledbackground','disabledforeground','exportselection',\n  'fg','font','foreground','highlightbackground',\n  'highlightcolor','highlightthickness','insertbackground',\n  'insertborderwidth','insertofftime','insertontime',\n  'insertwidth','invalidcommand','invcmd','justify',\n  'readonlybackground','relief','selectbackground',\n  'selectborderwidth','selectforeground','show','state',\n  'takefocus','textvariable','validate','validatecommand',\n  'vcmd','width','xscrollcommand']\n  \nclass Frame(Widget):\n\n def __init__(self,master,**kw):\n  self.master=master\n  self.kw=kw\n  self.element=self.payload=html.DIV()\n  self.config(**kw)\n  \n def keys(self):\n  return ['bd','borderwidth','class','relief','background','bg',\n  'colormap','container','cursor','height','highlightbackground',\n  'highlightcolor','highlightthickness','padx','pady',\n  'takefocus','visual','width']\n  \nclass Label(Widget):\n\n def __init__(self,master,*,text='',**kw):\n  self.master=master\n  self.text=text\n  self.kw=kw\n  self.payload=html.DIV(text,style={'white-space':'pre'})\n  self.element=html.SPAN(html.DIV(self.payload))\n  self.config(**kw)\n  \n def keys(self):\n  return ['activebackground','activeforeground','anchor',\n  'background','bd','bg','bitmap','borderwidth','compound',\n  'cursor','disabledforeground','fg','font','foreground',\n  'height','highlightbackground','highlightcolor',\n  'highlightthickness','image','justify','padx','pady',\n  'relief','state','takefocus','text','textvariable',\n  'underline','width','wraplength']\n  \n  \nclass Listbox(Widget):\n\n _default_config={\n 'height':10\n }\n \n def __init__(self,master,**kw):\n  self.master=master\n  self.kw=self._default_config |kw\n  self.payload=html.SELECT()\n  self.element=html.SPAN(html.DIV(self.payload))\n  self.config(**self.kw)\n  \n def delete(self,position):\n  if position is END:\n   position=len(self.payload.options)-1\n  elif position is ACTIVE:\n   position=self.payload.selectedIndex\n  self.payload.remove(position)\n  \n def insert(self,position,*options):\n  if position is END:\n   for option in options:\n    self.payload <=html.OPTION(option)\n   return\n  elif position is ACTIVE:\n   position=self.payload.selectedIndex\n  for option in options.reverse():\n   self.payload.add(html.OPTION(option),position)\n   \n def keys(self):\n  return ['activestyle','background','bd','bg','borderwidth',\n  'cursor','disabledforeground','exportselection','fg','font',\n  'foreground','height','highlightbackground','highlightcolor',\n  'highlightthickness','justify','relief','selectbackground',\n  'selectborderwidth','selectforeground','selectmode','setgrid',\n  'state','takefocus','width','xscrollcommand','yscrollcommand',\n  'listvariable']\n  \n def size(self):\n  return len(self.payload.options)\n  \nclass Menu(Widget):\n\n _main_menu_style={\n 'border-color':borderColor,\n 'border-width':'0px',\n 'width':'100%',\n 'cursor':'default',\n 'padding':'5px 0px 5px 0px'\n }\n \n _main_menu_span_style={\n 'padding':'0em 1em 0em 0.5em'\n }\n \n _submenu_style={\n 'position':'absolute',\n 'border-color':borderColor,\n 'width':'auto',\n 'cursor':'default'\n }\n \n _submenu_label_style={\n 'padding-left':'0.5em',\n 'padding-right':'0px',\n 'width':'80%'\n }\n \n _submenu_arrow_style={\n 'text-align':'right',\n 'padding-left':'3px',\n 'padding-right':'5px'\n }\n \n _default_config_main={\n 'activebackground':'#0078d7',\n 'background':backgroundColor,\n 'foreground':color\n }\n \n _default_config={\n 'activebackground':'#0078d7',\n 'background':backgroundColor,\n 'bd':1,\n 'foreground':color\n }\n \n def __init__(self,master,**kw):\n  self.master=master\n  self.toplevel=isinstance(master,Tk)\n  if self.toplevel:\n   master.menu=self\n   self.kw=self._default_config_main |kw\n  else :\n   self.kw=self._default_config |kw\n   \n  self.selected=None\n  self.open_submenu=None\n  self.open_on_mouseenter=False\n  self._ignore_next_key_events=False\n  \n  self.choices=[]\n  \n def add_cascade(self,**kw):\n  ''\n\n\n\n  \n  self.choices.append(kw |{'type':'cascade'})\n  \n def add_command(self,**kw):\n  self.choices.append(kw |{'type':'command'})\n  \n def add_separator(self):\n  self.choices.append({'type':'separator'})\n  \n def keys(self):\n  return ['activebackground','activeborderwidth','activeforeground',\n  'background','bd','bg','borderwidth','cursor',\n  'disabledforeground','fg','font','foreground','postcommand',\n  'relief','selectcolor','takefocus','tearoff','tearoffcommand',\n  'title','type']\n  \n def _select(self,cell):\n  ''\n  self.selected=cell\n  cell.style.backgroundColor='lightblue'\n  \n def _unselect(self):\n  if self.selected:\n   self.selected.style.backgroundColor=self.kw['background']\n   self.selected.style.color=self.kw['foreground']\n   self.selected=None\n   if self.open_submenu:\n    self.open_submenu.element.remove()\n   self.open_submenu=None\n   \n def _show_cascade(self,cell):\n  global _selected\n  submenu=cell.kw['menu']\n  submenu._build()\n  submenu.opener=cell\n  cell.menu=self\n  self.element <=submenu.element\n  self.open_on_mouseenter=True\n  master=self.master.element\n  if self.toplevel:\n   _selected=[self.master]\n   submenu.element.style.left=f\"{cell.abs_left - master.abs_left}px\"\n   submenu.element.style.top=f\"{cell.abs_top - master.abs_top + cell.offsetHeight}px\"\n  else :\n   submenu.element.style.left=f\"{self.element.offsetWidth}px\"\n   submenu.element.style.top=f\"{cell.abs_top - self.element.abs_top}px\"\n  submenu.element.style.display='block'\n  self.open_submenu=submenu\n  \n def _cell_enter(self,cell):\n  self._unselect()\n  if self.toplevel:\n  \n   cell.style.backgroundColor='lightblue'\n   self._select(cell)\n   if self.open_on_mouseenter:\n    self._show_cascade(cell)\n  else :\n   if cell.firstChild.colSpan ==2:\n   \n    return\n   opener=self.opener\n   cell.style.backgroundColor=self.kw['activebackground']\n   cell.style.color='#fff'\n   opener.style.backgroundColor='lightblue'\n   self._select(cell)\n   \n def _cell_leave(self,cell):\n  if self.toplevel:\n   cell.style.backgroundColor=self.kw['background']\n  else :\n   cell.style.backgroundColor=self.kw['background']\n   cell.style.color=self.kw['foreground']\n   \n def _build(self):\n  self._unselect()\n  if self.toplevel:\n   self.element=html.DIV(style=self._main_menu_style)\n  else :\n   self.element=html.DIV(style=self._submenu_style)\n   self.table=html.TABLE(cellspacing=0)\n   self.element <=self.table\n   \n  self.payload=self.element\n  self.config(**self.kw)\n  \n  for choice in self.choices:\n   if choice['type']=='separator':\n    if not self.toplevel:\n     cell=html.TR(html.TD(html.HR(),colspan=2))\n     self.table <=cell\n    continue\n   else :\n    label=choice.get('label','').replace(' ',chr(160))\n    \n   if self.toplevel:\n    cell=html.SPAN(label,style=self._main_menu_span_style)\n    self.element <=cell\n   else :\n    arrow=html.SPAN()\n    if choice['type']=='cascade':\n     arrow.html='&#x25B6;'\n    elif choice['type']=='separator':\n     arrow.html='<hr>'\n    else :\n     arrow.html='&nbsp;'\n    cell=html.TR(\n    html.TD(label,style=self._submenu_label_style)+\n    html.TD(arrow,style=self._submenu_arrow_style))\n    self.table <=cell\n   cell.menu=self\n   cell.bind('mouseenter',lambda ev:self._cell_enter(ev.target))\n   cell.bind('mouseleave',lambda ev:self._cell_leave(ev.target))\n   if choice['type']=='cascade':\n    cell.kw=choice\n    cell.bind('click',\n    lambda ev,cell=cell:self._show_cascade(cell))\n    \n    \nclass Radiobutton(Widget):\n\n def __init__(self,master,text='',value=None ,variable=None ,\n **kw):\n  self.master=master\n  self.kw=kw\n  self.payload=html.INPUT(type='radio',value=value,name='x')\n  if variable:\n   self.payload.name=variable.name\n   if variable.value ==value:\n    self.payload.checked=True\n   self.payload.bind('click',lambda ev:variable.set(ev.target.value))\n  self.element=html.SPAN(html.DIV(html.DIV(self.payload+\n  html.SPAN(text))))\n  self.config(**kw)\n  \n def keys(self):\n  return ['activebackground','activeforeground','anchor',\n  'background','bd','bg','bitmap','borderwidth','command',\n  'compound','cursor','disabledforeground','fg','font',\n  'foreground','height','highlightbackground','highlightcolor',\n  'highlightthickness','image','indicatoron','justify',\n  'offrelief','overrelief','padx','pady','relief',\n  'selectcolor','selectimage','state','takefocus','text',\n  'textvariable','tristateimage','tristatevalue','underline',\n  'value','variable','width','wraplength']\n  \n  \nclass Text(Widget):\n\n _default_config={\n 'height':10,\n 'relief':SUNKEN,\n 'borderwidth':2\n }\n \n def __init__(self,master,**kw):\n  self.master=master\n  self.kw=self._default_config |kw\n  self.payload=html.DIV(contenteditable=True ,\n  style={'text-align':'left','background-color':'#fff'})\n  self.element=html.SPAN(html.DIV(self.payload,style='width:100%'))\n  self.config(**self.kw)\n  self.has_focus=False\n  self.payload.bind('mouseleave',lambda ev:self._lose_focus())\n  self._selection=None\n  \n def index(self,position):\n  row,column=self._index(position)\n  return f'{row}.{column}'\n  \n def _index(self,position):\n  el=self.payload\n  if position is END or position ==\"end\":\n  \n  \n   lines=self._get_text().split('\\n')\n   return len(lines)+1,0\n  elif position is INSERT or position ==\"insert\":\n  \n   if self._selection:\n    node,offset=self._selection\n   else :\n    sel=window.getSelection()\n    node=sel.anchorNode\n    offset=sel.anchorOffset\n   if node is javascript.NULL\\\n   or node is el\\\n   or not el.contains(node):\n    lines=self._get_text().split('\\n')\n    return len(lines),len(lines[-1])\n   else :\n    return self._node_offset_to_row_column(node,offset)\n  elif isinstance(position,float):\n   row,column=[int(x)for x in str(position).split('.')]\n  elif isinstance(position,str):\n   if '.'not in position:\n    raise ValueError(f'bad text index \"{position}\"')\n   row,column=position.split('.')\n   row=int(row)\n   if row <=0:\n    return [0,0]\n    \n   delta_column=0\n   delta_row=0\n   regexp='\\s*([+-])\\s*(\\d+)\\s*(chars|char|cha|ch|c|lines|line|lin|li|l)'\n   while True :\n    if mo :=re.search(regexp,column):\n     column=column[:mo.start()]+column[mo.end():]\n     delta=int(mo.groups()[0]+mo.groups()[1])\n     if mo.groups()[2].startswith('c'):\n      delta_column +=delta\n     else :\n      delta_row +=delta\n    else :\n     break\n     \n     \n   if mo :=re.search('(linestart|lineend)',column):\n    s=mo.groups()[0]\n    if s =='linestart':\n     column=0\n    else :\n     column='end'\n     \n     \n   word_border=None\n   if mo :=re.search('(wordstart|wordend)',column):\n    word_border=mo.groups()[0]\n    column=column[:mo.start()]+column[mo.end():]\n    \n   row +=delta_row\n   lines=el.text.split('\\n')\n   if row >len(lines):\n    return self.index(END)\n   if column =='end':\n    line=lines[row -1]\n    column=len(line)\n   else :\n    line=lines[row -1]\n    column=min(len(line),int(column)+delta_column)\n    if word_border ==\"wordstart\":\n     while column and line[column -1].isalnum():\n      column -=1\n    elif word_border ==\"wordend\":\n     while column <len(line)and line[column].isalnum():\n      column +=1\n  return row,column\n  \n def grid(self,**kwargs):\n  super().grid(**kwargs)\n  h=window.getComputedStyle(self.master.element)['height']\n  self.element.style.height=h\n  \n def delete(self,position,end=None ):\n  row,column=self.index(position)\n  _range=document.createRange()\n  sel=window.getSelection()\n  el=self.payload\n  _range.setStart(el.childNodes[row -1],column)\n  \n  if end is not None :\n   end_row,end_column=self._convert_position(end)\n   if end_row >=len(el.childNodes):\n    end_row=len(el.childNodes)\n    end_column=len(el.childNodes[end_row].innerText)\n   _range.setEnd(el.childNodes[end_row -1],end_column)\n  else :\n   _range.setEnd(el.childNodes[row -1],column+1)\n   \n  sel.removeAllRanges()\n  sel.addRange(_range)\n  _range.deleteContents()\n  \n def insert(self,position,text,tags=()):\n  el=self.payload\n  if not el.childNodes:\n   lines=text.split('\\n')\n   el <=lines[0]\n   for line in lines[1:]:\n    el <=html.DIV(line)\n  elif position is END:\n   lastChild=el.lastChild\n   lines=text.split('\\n')\n   if lastChild.nodeType ==3:\n    lastChild.nodeValue +=lines[0]\n    el <=(html.DIV(line)for line in lines[1:])\n   else :\n    el <=(html.DIV(line)for line in lines)\n  else :\n   if position is INSERT:\n    row,column=self._index(INSERT)\n   else :\n    row,column=self._index(position)\n   element_text=self._get_text()\n   lines=element_text.split('\\n')\n   if row >len(lines):\n    return self.insert(END,text)\n   line=lines[row -1]\n   \n   node,offset=self._row_column_to_node_offset(row,column)\n   if node.nodeType ==1 and node.nodeName =='BR':\n    node.parentNode.replaceChild(document.createTextNode(text),node)\n   else :\n    node.nodeValue=node.nodeValue[:offset]+text+\\\n    node.nodeValue[offset:]\n    \n  if self._selection:\n  \n   node,offset=self._selection\n   _range=document.createRange()\n   _range.setStart(node,offset)\n   if position is INSERT:\n    _range.setStart(node,offset+len(text))\n   _range.collapse(True )\n   selection=window.getSelection()\n   selection.removeAllRanges()\n   selection.addRange(_range)\n   \n def keys(self):\n  return ['autoseparators','background','bd','bg','blockcursor',\n  'borderwidth','cursor','endline','exportselection','fg','font',\n  'foreground','height','highlightbackground','highlightcolor',\n  'highlightthickness','inactiveselectbackground',\n  'insertbackground','insertborderwidth','insertofftime',\n  'insertontime','insertunfocussed','insertwidth','maxundo',\n  'padx','pady','relief','selectbackground','selectborderwidth',\n  'selectforeground','setgrid','spacing1','spacing2','spacing3',\n  'startline','state','tabs','tabstyle','takefocus','undo',\n  'width','wrap','xscrollcommand','yscrollcommand']\n  \n def _get_text(self):\n  text=''\n  previous=None\n  for child in self.payload.childNodes:\n   if previous and child.nodeType ==1\\\n   and child.nodeName =='DIV':\n    text +='\\n'\n   if child.nodeType ==3:\n    text +=child.nodeValue.strip()\n   elif child.nodeType ==1:\n    if child.firstChild:\n     child=child.firstChild\n     if child.nodeType ==3:\n      text +=child.nodeValue.strip()\n   previous=child\n  return text\n  \n def _row_column_to_node_offset(self,row,column):\n  line=1\n  col=0\n  previous=None\n  \n  if not self.payload.childNodes:\n   return self.payload,0\n  if len(self.payload.childNodes)==1\\\n  and self.payload.firstChild.nodeType ==1\\\n  and self.payload.firstChild.nodeName =='BR':\n   t=document.createTextNode('')\n   self.payload.removeChild(self.payload.firstChild)\n   self.payload <=t\n   return t,0\n   \n  for child in self.payload.childNodes:\n   if child.nodeType ==3:\n    node_value=child.nodeValue\n    node_text=node_value.strip()\n    node_lines=node_value.split('\\n')\n    offset=0\n    for i,node_line in enumerate(node_lines):\n     if row ==line+i:\n      return child,min(column+offset,len(node_line))\n     offset +=len(node_line)+1\n    line +=len(node_lines)-1\n   elif child.nodeType ==1:\n    if previous and child.nodeName =='DIV':\n     line +=1\n     col=0\n    for child in child.childNodes:\n     if child.nodeType ==3:\n      node_value=child.nodeValue\n      node_lines=node_value.split('\\n')\n      offset=0\n      for i,node_line in enumerate(node_lines):\n       col=0\n       if not node_line and i ==len(node_lines)-1:\n       \n        continue\n       if row ==line+i:\n        return child,min(column+offset,len(node_line))\n       offset +=len(node_line)+1\n       col=len(node_line)\n      line +=len(node_lines)-1\n     elif child.nodeType ==1:\n      if child.nodeName =='BR'and column ==0:\n       node_line=''\n       if row ==line:\n        return child,0\n   previous=child\n   \n  return self.payload,0\n  \n def _node_offset_to_row_column(self,node,node_offset):\n  line=1\n  col=0\n  previous=None\n  \n  for child in self.payload.childNodes:\n   if child.nodeType ==3:\n    node_value=child.nodeValue\n    node_text=node_value.strip()\n    node_lines=node_value.split('\\n')\n    offset=0\n    for i,node_line in enumerate(node_lines):\n     if child is node and offset <=node_offset <offset+len(node_line):\n      return line+i,node_offset\n     offset +=len(node_line)+1\n    if child is node:\n     return line+i,len(node_line)\n    line +=len(node_lines)-1\n   elif child.nodeType ==1:\n    if previous and child.nodeName =='DIV':\n     line +=1\n     col=0\n    for child in child.childNodes:\n     if child.nodeType ==3:\n      node_value=child.nodeValue\n      node_lines=node_value.split('\\n')\n      offset=0\n      for i,node_line in enumerate(node_lines):\n       col=0\n       if not node_line and i ==len(node_lines)-1:\n       \n        continue\n       if child is node and offset <=node_offset <offset+len(node_line):\n        return line+i,node_offset\n       offset +=len(node_line)+1\n       col=len(node_line)\n      line +=len(node_lines)-1\n     elif child.nodeType ==1:\n      if child.nodeName =='BR'and column ==0:\n       node_line=''\n       if child is node:\n        return line,0\n   previous=child\n   \n def _lose_focus(self):\n  sel=window.getSelection()\n  if sel.anchorNode !=self.payload:\n   self._selection=sel.anchorNode,sel.anchorOffset\n   \nclass _KeyEventState:\n ignore=False\n \ndef _get_rank(elt):\n\n for rank,child in enumerate(elt.parentNode.childNodes):\n  if child is elt:\n   return rank\n   \n@document.bind('keydown')\ndef _keyboard_move_selection(event):\n ''\n\n \n if _KeyEventState.ignore:\n  return\n if not _selected or not _selected[0].menu\\\n or not _selected[0].menu.selected:\n  return\n menu=_selected[0].menu\n if event.key =='ArrowRight':\n  rank=_get_rank(menu.selected)\n  if rank <len(menu.choices)-1:\n   menu._cell_enter(menu.selected.nextSibling)\n   _KeyEventState.ignore=True\n  return\n elif event.key =='ArrowLeft':\n  rank=_get_rank(menu.selected)\n  if rank >0:\n   menu._cell_enter(menu.selected.previousSibling)\n   _KeyEventState.ignore=True\n  return\n  \n  \n menu=_selected[0].menu\n while True :\n  if menu.selected:\n   selected=menu.selected\n  if menu.open_submenu:\n   menu=menu.open_submenu\n  else :\n   break\n   \n if event.key =='ArrowDown':\n  menu=selected.menu\n  if menu.toplevel:\n   if menu.open_submenu:\n   \n    cell=menu.open_submenu.table.firstChild\n    menu.open_submenu._cell_enter(cell)\n    _KeyEventState.ignore=True\n  else :\n   rank=_get_rank(menu.selected)\n   while rank <len(menu.choices)-1:\n    candidate=selected.parentNode.childNodes[rank+1]\n    if candidate.firstChild.colSpan ==2:\n     rank +=1\n    else :\n     menu._cell_enter(candidate)\n     _KeyEventState.ignore=True\n     break\n     \n elif event.key =='ArrowUp':\n  menu=selected.menu\n  if not menu.toplevel:\n   rank=_get_rank(menu.selected)\n   while rank >0:\n    candidate=selected.parentNode.childNodes[rank -1]\n    if candidate.firstChild.colSpan ==2:\n     rank -=1\n    else :\n     menu._cell_enter(candidate)\n     _KeyEventState.ignore=True\n     break\n     \n@document.bind('keyup')\ndef _keyup(event):\n _KeyEventState.ignore=False\n \ndef mainloop():\n for item in _loops:\n  item.mainloop()\n", ["browser", "javascript", "re"], 1]}
__BRYTHON__.update_VFS(scripts)
